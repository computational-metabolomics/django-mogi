# Generated by Django 3.2.16 on 2022-10-21 09:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import gfiles.models
import mogi.models.models_isa
import mogi.models.models_search


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gfiles', '0001_initial'),
        ('galaxy', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=40, null=True)),
                ('name', models.CharField(max_length=100)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this assay')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the assay', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssayDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_field', models.CharField(db_column='code_', max_length=100, validators=[mogi.models.models_isa.validate_workflow_code])),
                ('assay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.assay')),
            ],
        ),
        migrations.CreateModel(
            name='CombinedAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_id', models.IntegerField(blank=True, null=True)),
                ('inchikey', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey1', models.CharField(blank=True, max_length=254, null=True)),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('ms_type', models.CharField(blank=True, max_length=254, null=True)),
                ('sid', models.IntegerField(blank=True, null=True)),
                ('grpid', models.IntegerField(blank=True, null=True)),
                ('grp_name', models.CharField(blank=True, max_length=254, null=True)),
                ('mz', models.FloatField(blank=True, null=True)),
                ('sm_lpid', models.IntegerField(blank=True, null=True)),
                ('pubchem_cids', models.CharField(blank=True, max_length=254, null=True)),
                ('rt', models.FloatField(blank=True, null=True)),
                ('well', models.CharField(blank=True, max_length=1024, null=True)),
                ('sirius_score', models.FloatField(blank=True, null=True)),
                ('sirius_wscore', models.FloatField(blank=True, null=True)),
                ('metfrag_score', models.FloatField(blank=True, null=True)),
                ('metfrag_wscore', models.FloatField(blank=True, null=True)),
                ('sm_score', models.FloatField(blank=True, null=True)),
                ('sm_wscore', models.FloatField(blank=True, null=True)),
                ('ms1_lookup_score', models.FloatField(blank=True, null=True)),
                ('ms1_lookup_wscore', models.FloatField(blank=True, null=True)),
                ('biosim_max_score', models.FloatField(blank=True, null=True)),
                ('biosim_wscore', models.FloatField(blank=True, null=True)),
                ('wscore', models.FloatField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('adduct_overall', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.genericfile')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('inchikey', models.CharField(blank=True, max_length=254, null=True, unique=True)),
                ('inchikey1', models.CharField(blank=True, max_length=254, null=True)),
                ('inchi', models.TextField(blank=True, null=True)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('molecular_formula', models.TextField(blank=True, null=True)),
                ('monoisotopic_exact_mass', models.FloatField(blank=True, null=True)),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('natural_product_inchikey1', models.BooleanField(blank=True, null=True)),
                ('pubchem_cids', models.TextField(blank=True, null=True)),
                ('hmdb_ids', models.TextField(blank=True, null=True)),
                ('kegg_ids', models.TextField(blank=True, null=True)),
                ('chebi_ids', models.TextField(blank=True, null=True)),
                ('kingdom', models.CharField(blank=True, max_length=254, null=True)),
                ('superclass', models.CharField(blank=True, max_length=254, null=True)),
                ('_class', models.CharField(blank=True, max_length=254, null=True)),
                ('subclass', models.CharField(blank=True, max_length=254, null=True)),
                ('direct_parent', models.CharField(blank=True, max_length=254, null=True)),
                ('molecular_framework', models.CharField(blank=True, max_length=254, null=True)),
                ('predicted_lipidmaps_terms', models.CharField(blank=True, max_length=254, null=True)),
                ('assay', models.TextField(blank=True, null=True)),
                ('extraction', models.TextField(blank=True, null=True)),
                ('spe', models.TextField(blank=True, null=True)),
                ('spe_frac', models.TextField(blank=True, null=True)),
                ('chromatography', models.TextField(blank=True, null=True)),
                ('measurement', models.TextField(blank=True, null=True)),
                ('polarity', models.TextField(blank=True, null=True)),
                ('lcmsdimsbool', models.BooleanField(blank=True, null=True)),
                ('nmrbool', models.BooleanField(blank=True, null=True)),
                ('gcmsbool', models.BooleanField(blank=True, null=True)),
                ('smbool', models.BooleanField(blank=True, null=True)),
                ('metfragbool', models.BooleanField(blank=True, null=True)),
                ('siriusbool', models.BooleanField(blank=True, null=True)),
                ('mzcloudsmbool', models.BooleanField(blank=True, null=True)),
                ('galaxysmbool', models.BooleanField(blank=True, null=True)),
                ('gnpssmbool', models.BooleanField(blank=True, null=True)),
                ('msi_level', models.CharField(blank=True, max_length=254, null=True)),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy_history_url', models.TextField(blank=True, null=True)),
                ('metabolite_standard', models.BooleanField(default=False)),
                ('fractionation', models.BooleanField(default=False)),
                ('sqlite', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('tsv', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('assay', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.assay')),
            ],
        ),
        migrations.CreateModel(
            name='HMDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('hmdbid', models.CharField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='IncomingGalaxyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy_url', models.TextField(blank=True, max_length=100, null=True)),
                ('galaxy_name', models.TextField(max_length=100)),
                ('galaxy_data_id', models.TextField(max_length=100)),
                ('galaxy_history_id', models.TextField(max_length=100)),
                ('galaxy_history_name', models.TextField(blank=True, max_length=100, null=True)),
                ('other_details', models.TextField(blank=True, max_length=100, null=True)),
                ('investigation_name', models.TextField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Investigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(help_text='Investigation description')),
                ('slug', models.SlugField(unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this investigation')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the investigation', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='KEGG',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('cid', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='MetFrag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_id', models.IntegerField(blank=True, null=True)),
                ('inchikey', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey1', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey2', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey3', models.CharField(blank=True, max_length=254, null=True)),
                ('sample_name', models.CharField(blank=True, max_length=254, null=True)),
                ('mz', models.FloatField(blank=True, null=True)),
                ('grpid', models.IntegerField(blank=True, null=True)),
                ('rt', models.FloatField(blank=True, null=True)),
                ('adduct', models.CharField(blank=True, max_length=254, null=True)),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('expl_peaks', models.TextField(blank=True, null=True)),
                ('formulas_of_expl_peaks', models.TextField(blank=True, null=True)),
                ('fragmenter_score', models.FloatField(blank=True, null=True)),
                ('fragmenter_score_values', models.TextField(blank=True, null=True)),
                ('identifier', models.TextField(blank=True, null=True)),
                ('inchi', models.TextField(blank=True, null=True)),
                ('maximum_tree_depth', models.CharField(blank=True, max_length=254, null=True)),
                ('molecular_formula', models.TextField(blank=True, null=True)),
                ('monoisotopic_mass', models.FloatField(blank=True, null=True)),
                ('no_expl_peaks', models.CharField(blank=True, max_length=254, null=True)),
                ('number_peaks_used', models.CharField(blank=True, max_length=254, null=True)),
                ('file', models.TextField(blank=True, null=True)),
                ('offline_met_fusion_score', models.FloatField(blank=True, null=True)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('suspect_list_score', models.FloatField(blank=True, null=True)),
                ('xlogp3', models.FloatField(blank=True, null=True)),
                ('pid', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MFileSuffix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suffix', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MsLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ms_level', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='OntologyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ontology_id', models.CharField(max_length=200, unique=True)),
                ('iri', models.TextField(blank=True, null=True)),
                ('obo_id', models.CharField(blank=True, max_length=200, null=True)),
                ('ontology_name', models.CharField(blank=True, max_length=200, null=True)),
                ('ontology_prefix', models.CharField(blank=True, max_length=200, null=True)),
                ('short_form', models.CharField(max_length=200, unique=True)),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this ontology term')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the ontology', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this organism detail')),
                ('ontologyterm', models.ForeignKey(help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.ontologyterm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the organism detail', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganismPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this organism part detail')),
                ('ontologyterm', models.ForeignKey(help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.ontologyterm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the organism part detail', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PolarityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PubChem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('cid', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SampleCollectionProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this sample type')),
                ('ontologyterm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.ontologyterm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the sample type', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Any details to track for the analysis', max_length=100, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='SiriusCSIFingerID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_id', models.IntegerField(blank=True, null=True)),
                ('mz', models.FloatField(blank=True, null=True)),
                ('rt', models.FloatField(blank=True, null=True)),
                ('grpid', models.IntegerField(blank=True, null=True)),
                ('file', models.TextField(blank=True, null=True)),
                ('adduct', models.CharField(blank=True, max_length=1024, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('formula_rank', models.IntegerField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('molecular_formula', models.TextField(blank=True, null=True)),
                ('inchikey2', models.CharField(blank=True, max_length=254, null=True)),
                ('inchi', models.CharField(blank=True, max_length=254, null=True)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('xlogp', models.FloatField(blank=True, null=True)),
                ('pubchemids', models.CharField(blank=True, max_length=254, null=True)),
                ('links', models.TextField(blank=True, null=True)),
                ('dbflags', models.TextField(blank=True, null=True)),
                ('bounded_score', models.FloatField(blank=True, null=True)),
                ('pid', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpectralMatching',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_id', models.IntegerField(blank=True, null=True)),
                ('inchikey', models.CharField(blank=True, max_length=254, null=True)),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('lpid', models.IntegerField(blank=True, null=True)),
                ('qpid', models.IntegerField(blank=True, null=True)),
                ('dpc', models.FloatField(blank=True, null=True)),
                ('rdpc', models.FloatField(blank=True, null=True)),
                ('cdpc', models.FloatField(blank=True, null=True)),
                ('mcount', models.IntegerField(blank=True, null=True)),
                ('allcount', models.IntegerField(blank=True, null=True)),
                ('mpercent', models.FloatField(blank=True, null=True)),
                ('library_rt', models.FloatField(blank=True, null=True)),
                ('query_rt', models.FloatField(blank=True, null=True)),
                ('rtdiff', models.FloatField(blank=True, null=True)),
                ('library_precursor_mz', models.FloatField(blank=True, null=True)),
                ('query_precursor_mz', models.FloatField(blank=True, null=True)),
                ('library_accession', models.TextField(blank=True, null=True)),
                ('library_precursor_type', models.CharField(blank=True, max_length=254, null=True)),
                ('library_entry_name', models.TextField(blank=True, null=True)),
                ('library_source_name', models.CharField(blank=True, max_length=254, null=True)),
                ('library_compound_name', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Study description')),
                ('name', models.CharField(help_text='e.g. the study identifier', max_length=100)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('grant_number', models.CharField(blank=True, max_length=100, null=True)),
                ('funding_agency', models.CharField(blank=True, max_length=100, null=True)),
                ('submission_date', models.DateTimeField(blank=True, null=True)),
                ('public_release_date', models.DateTimeField(blank=True, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this study')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.investigation')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the study', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('study_design_descriptors', models.ManyToManyField(blank=True, help_text="Any ontological terms that can describe or 'tag' the study <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
            ],
            options={
                'unique_together': {('name', 'investigation')},
            },
        ),
        migrations.CreateModel(
            name='StudyFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='If no appropriate ontological term for the value, then add free text here', max_length=100, null=True, verbose_name='Study Factor Value (non ontology term)')),
                ('full_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this study factor')),
                ('ontologyterm_type', models.ForeignKey(blank=True, help_text="The type for the value e.g. gene knockout, concentration unit, etc If the ontology term is not available please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_type', to='mogi.ontologyterm', verbose_name='Study Factor Type')),
                ('ontologyterm_unit', models.ForeignKey(blank=True, help_text='If the value has a unit, find an appropiate ontology term', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_unit', to='mogi.ontologyterm', verbose_name='Study Factor Unit')),
                ('ontologyterm_value', models.ForeignKey(blank=True, help_text="The value, e.g. if  wild type,If the ontology term is not available please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_value', to='mogi.ontologyterm', verbose_name='Study Factor Value (ontology term')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the study factor', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UploadCompounds',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.genericfile')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='UploadDatasets',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.genericfile')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='SearchMonoParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.searchparam')),
                ('masses', models.TextField(blank=True, help_text='list of monoisotopic exact masses to search against database', null=True)),
                ('ppm_tolerance', mogi.models.models_search.MinMaxFloat(default=5)),
                ('matches', models.BooleanField(default=False)),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.CreateModel(
            name='StudySample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_name', models.CharField(help_text='The sample name has to unique for each study', max_length=200)),
                ('source_name', models.CharField(blank=True, help_text='The source of the sample', max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this sample')),
                ('organism', models.ForeignKey(blank=True, help_text="If organism not available then please   <a target='_blank' href='/org_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.organism')),
                ('organism_part', models.ForeignKey(blank=True, help_text="If organism part not available then please   <a target='_blank' href='/orgpart_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.organismpart')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the sample', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('samplecollectionprocess', models.ForeignKey(blank=True, help_text='The sample collection process used (will be added automatically)', null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.samplecollectionprocess')),
                ('sampletype', models.ForeignKey(help_text='This is an internal category that helps with some downstream processing essentialy ANIMAL covers all biological samples, COMPOUND is for chemical standards or non biological samples, and BLANK is for any samples that represent the blank (e.g. for  blank subtraction)', on_delete=django.db.models.deletion.CASCADE, to='mogi.sampletype')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.study')),
                ('studyfactor', models.ManyToManyField(blank=True, help_text="If factor not available then please   <a target='_blank' href='/sfcreate/'>add</a>.", to='mogi.StudyFactor')),
            ],
            options={
                'unique_together': {('sample_name', 'study')},
            },
        ),
        migrations.CreateModel(
            name='SpeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('spetype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/spet_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.spetype')),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='SpeProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('spefrac', models.IntegerField()),
                ('speprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.speprotocol')),
            ],
        ),
        migrations.CreateModel(
            name='SearchMonoResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('massquery', models.FloatField(blank=True, null=True, verbose_name='Query mass')),
                ('ppmdiff', models.FloatField(blank=True, null=True)),
                ('compound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.compound')),
                ('searchparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.searchparam')),
            ],
        ),
        migrations.CreateModel(
            name='SearchFragSpectra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mz', models.FloatField(blank=True, null=True)),
                ('ra', models.FloatField(blank=True, null=True)),
                ('query_library', models.CharField(blank=True, max_length=254, null=True)),
                ('searchparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.searchparam')),
            ],
        ),
        migrations.CreateModel(
            name='SearchFragResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dpc', models.FloatField(blank=True, null=True)),
                ('l_prec_mz', models.FloatField(blank=True, null=True)),
                ('q_prec_mz', models.FloatField(blank=True, null=True)),
                ('rt', models.FloatField(blank=True, null=True)),
                ('well', models.CharField(blank=True, max_length=254, null=True)),
                ('ppm_diff_prec', models.FloatField(blank=True, null=True)),
                ('dataset_pid', models.IntegerField(blank=True, null=True)),
                ('dataset_grpid', models.IntegerField(blank=True, null=True)),
                ('dataset_sid', models.IntegerField(blank=True, null=True)),
                ('spectrum_type', models.CharField(blank=True, max_length=254, null=True)),
                ('spectrum_details', models.CharField(blank=True, max_length=254, null=True)),
                ('top_spectral_match', models.CharField(blank=True, max_length=254, null=True)),
                ('top_metfrag', models.CharField(blank=True, max_length=254, null=True)),
                ('top_sirius_csifingerid', models.CharField(blank=True, max_length=254, null=True)),
                ('top_combined_annotation', models.CharField(blank=True, max_length=254, null=True)),
                ('top_wscore', models.FloatField(blank=True, null=True)),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.dataset')),
                ('searchparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.searchparam')),
            ],
            options={
                'ordering': ('-dpc',),
            },
        ),
        migrations.CreateModel(
            name='SampleCollectionProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.AddField(
            model_name='samplecollectionprocess',
            name='samplecollectionprotocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.samplecollectionprotocol'),
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technical_replicate', models.IntegerField(default=1)),
                ('prefix', models.CharField(max_length=254)),
                ('assaydetail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.assaydetail')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the assay run', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('polaritytype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.polaritytype')),
            ],
        ),
        migrations.CreateModel(
            name='MISAFile',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.genericfile')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.investigation')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='MFile',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.genericfile')),
                ('prefix', models.CharField(max_length=254)),
                ('mfilesuffix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.mfilesuffix')),
                ('run', models.ForeignKey(help_text='The instrument run corresponding to this file', on_delete=django.db.models.deletion.CASCADE, to='mogi.run')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='MetaboliteIdentificationProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MetaboliteIdentificationProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
                ('metaboliteidentificationprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.metaboliteidentificationprotocol')),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementTechnique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('measurementtechnique', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/mt_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.measurementtechnique')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MeasurementProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('measurementprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.measurementprotocol')),
                ('polaritytype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.polaritytype')),
            ],
        ),
        migrations.CreateModel(
            name='ISAGalaxyTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy_id', models.CharField(max_length=254)),
                ('galaxyinstancetracking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galaxy.galaxyinstancetracking')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.investigation')),
                ('isatogalaxyparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galaxy.filestogalaxydatalibraryparam')),
            ],
        ),
        migrations.CreateModel(
            name='ExtractionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('postextraction', models.CharField(blank=True, max_length=300, null=True)),
                ('derivitisation', models.CharField(blank=True, max_length=300, null=True)),
                ('extractiontype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/et_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.extractiontype')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ExtractionProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('extractionprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.extractionprotocol')),
            ],
        ),
        migrations.CreateModel(
            name='DataTransformationProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='DataTransformationProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
                ('datatransformationprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.datatransformationprotocol')),
            ],
        ),
        migrations.AddField(
            model_name='dataset',
            name='polarity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.polaritytype'),
        ),
        migrations.CreateModel(
            name='ChromatographyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChromatographyProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instrument_name', models.CharField(max_length=300)),
                ('chromatographytype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/ct_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.chromatographytype')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ChromatographyProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('chromatographyfrac', models.CharField(max_length=300)),
                ('chromatographyprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.chromatographyprotocol')),
            ],
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='chromatographyprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.chromatographyprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='datatransformationprocess',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.datatransformationprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='extractionprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.extractionprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='measurementprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.measurementprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='metaboliteidentifcationprocess',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.metaboliteidentificationprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='samplecollectionprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.samplecollectionprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='speprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.speprocess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='studysample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.studysample'),
        ),
        migrations.AddField(
            model_name='assay',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.study'),
        ),
        migrations.CreateModel(
            name='SearchMzParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.searchparam')),
                ('masses', models.TextField(blank=True, help_text='list of exact masses to search against database', null=True)),
                ('ppm_target_tolerance', models.FloatField(blank=True, default=5, null=True)),
                ('ppm_library_tolerance', models.FloatField(blank=True, default=5, null=True)),
                ('ms_level', models.ManyToManyField(help_text='Choose the ms levels to search against', to='mogi.MsLevel')),
                ('polarity', models.ManyToManyField(help_text='Choose polarities to search against', to='mogi.PolarityType')),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.CreateModel(
            name='SearchFragParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.searchparam')),
                ('mz_precursor', models.FloatField()),
                ('products', models.TextField(help_text='list product ions m/z and intensity pairs on each row')),
                ('ppm_precursor_tolerance', mogi.models.models_search.MinMaxFloat(default=5)),
                ('ppm_product_tolerance', mogi.models.models_search.MinMaxFloat(default=5)),
                ('dot_product_score_threshold', mogi.models.models_search.MinMaxFloat(default=0.5)),
                ('ra_threshold', mogi.models.models_search.MinMaxFloat(default=0.0, help_text='Remove any peaks below %x of the most intense peak ')),
                ('ra_diff_threshold', models.FloatField(default=10)),
                ('polarity', models.ManyToManyField(help_text='Choose polarites to search against', to='mogi.PolarityType')),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.AlterUniqueTogether(
            name='assaydetail',
            unique_together={('code_field', 'assay')},
        ),
        migrations.AlterUniqueTogether(
            name='assay',
            unique_together={('name', 'study')},
        ),
    ]
