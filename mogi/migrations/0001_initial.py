# Generated by Django 2.2.8 on 2020-06-24 08:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gfiles.models
import mogi.models.models_annotations
import mogi.models.models_isa
import mogi.models.models_search


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gfiles', '0001_initial'),
        ('galaxy', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdductRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adduct_type', models.CharField(max_length=255, unique=True)),
                ('nmol', models.IntegerField()),
                ('charge', models.IntegerField()),
                ('massdiff', models.FloatField()),
                ('oidscore', models.FloatField()),
                ('quasi', models.FloatField()),
                ('ips', models.FloatField()),
                ('frag_score', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=40, null=True)),
                ('name', models.CharField(max_length=100)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this assay')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the assay', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssayDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_field', models.CharField(db_column='code_', max_length=100, validators=[mogi.models.models_isa.validate_workflow_code])),
                ('assay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Assay')),
            ],
        ),
        migrations.CreateModel(
            name='CombinedAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_annotated_adduct', models.CharField(blank=True, max_length=1000, null=True)),
                ('ms1_lookup_score', models.FloatField(blank=True, null=True)),
                ('ms1_lookup_wscore', models.FloatField(blank=True, null=True)),
                ('spectral_matching_score', models.FloatField(blank=True, null=True)),
                ('spectral_matching_wscore', models.FloatField(blank=True, null=True)),
                ('metfrag_score', models.FloatField(blank=True, null=True)),
                ('metfrag_wscore', models.FloatField(blank=True, null=True)),
                ('sirius_csifingerid_score', models.FloatField(blank=True, null=True)),
                ('sirius_csifingerid_wscore', models.FloatField(blank=True, null=True)),
                ('biosim_max_score', models.FloatField(blank=True, null=True)),
                ('biosim_wscore', models.FloatField(blank=True, null=True)),
                ('total_wscore', models.FloatField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CombinedAnnotationDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(default=0, help_text='What level of ranked peaks to include (leave at 0 to include all)')),
                ('user', models.ForeignKey(blank=True, help_text='The user requesting download', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CombinedPeak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mz', models.FloatField(blank=True, null=True)),
                ('intensity', models.FloatField(blank=True, null=True)),
                ('rt', models.FloatField(blank=True, null=True)),
                ('rtmin', models.FloatField(blank=True, null=True)),
                ('rtmax', models.FloatField(blank=True, null=True)),
                ('well', models.CharField(blank=True, max_length=100, null=True)),
                ('ms_type', models.CharField(blank=True, max_length=100, null=True)),
                ('fraction_match', models.BooleanField(default=False)),
                ('frag_match', models.BooleanField(default=False)),
                ('camera_adducts', models.CharField(blank=True, max_length=1000, null=True)),
                ('camera_isotopes', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('inchikey', models.CharField(max_length=254, primary_key=True, serialize=False)),
                ('inchikey1', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey2', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey3', models.CharField(blank=True, max_length=254, null=True)),
                ('name', models.CharField(blank=True, max_length=1024, null=True)),
                ('inchi', models.TextField(blank=True, null=True)),
                ('smiles_canonical', models.TextField(blank=True, null=True)),
                ('exact_mass', models.FloatField(blank=True, null=True)),
                ('molecular_formula', models.TextField(blank=True, null=True)),
                ('pubchem_cids', models.TextField(blank=True, null=True)),
                ('kegg_drugs', models.CharField(blank=True, max_length=1024, null=True)),
                ('kegg_brite', models.CharField(blank=True, max_length=1024, null=True)),
                ('hmdb_ids', models.CharField(blank=True, max_length=1024, null=True)),
                ('hmdb_bio_custom_flag', models.CharField(blank=True, max_length=1024, null=True)),
                ('hmdb_drug_flag', models.CharField(blank=True, max_length=1024, null=True)),
                ('biosim_max_score', models.FloatField(blank=True, null=True)),
                ('biosim_max_count', models.IntegerField(blank=True, null=True)),
                ('biosim_hmdb_ids', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CPeak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField(blank=True, null=True)),
                ('mz', models.FloatField()),
                ('mzmin', models.FloatField()),
                ('mzmax', models.FloatField()),
                ('rt', models.FloatField()),
                ('rtmin', models.FloatField()),
                ('rtmax', models.FloatField()),
                ('_into', models.FloatField()),
                ('intb', models.FloatField(blank=True, null=True)),
                ('maxo', models.FloatField()),
                ('sn', models.FloatField(blank=True, null=True)),
                ('rtminraw', models.FloatField(blank=True, null=True)),
                ('rtmaxraw', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Chromatography peaks',
            },
        ),
        migrations.CreateModel(
            name='CPeakGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField(blank=True, null=True)),
                ('mzmed', models.FloatField()),
                ('mzmin', models.FloatField()),
                ('mzmax', models.FloatField()),
                ('rtmed', models.FloatField()),
                ('rtmin', models.FloatField()),
                ('rtmax', models.FloatField()),
                ('npeaks', models.IntegerField()),
                ('isotopes', models.CharField(blank=True, max_length=40, null=True)),
                ('adducts', models.CharField(blank=True, max_length=1000, null=True)),
                ('pcgroup', models.IntegerField(blank=True, null=True)),
                ('msms_count', models.IntegerField(blank=True, null=True)),
                ('best_annotation', models.TextField(blank=True, null=True)),
                ('best_score', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Grouped chromatography peaks',
            },
        ),
        migrations.CreateModel(
            name='DetailType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='HMDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('hmdbid', models.CharField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='IncomingGalaxyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy_url', models.TextField(blank=True, max_length=100, null=True)),
                ('galaxy_name', models.TextField(max_length=100)),
                ('galaxy_data_id', models.TextField(max_length=100)),
                ('galaxy_history_id', models.TextField(max_length=100)),
                ('galaxy_history_name', models.TextField(blank=True, max_length=100, null=True)),
                ('other_details', models.TextField(blank=True, max_length=100, null=True)),
                ('investigation_name', models.TextField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Investigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(help_text='Investigation description')),
                ('slug', models.SlugField(unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this investigation')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the investigation', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='KEGG',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('cid', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='LibrarySpectraSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'library spectra references',
                'db_table': 'library_spectra_source',
            },
        ),
        migrations.CreateModel(
            name='MetabInputData',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.GenericFile')),
                ('galaxy_data_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this dataset')),
                ('assay_names', models.CharField(blank=True, max_length=1000, null=True)),
                ('study_names', models.CharField(blank=True, max_length=1000, null=True)),
                ('investigation_names', models.CharField(blank=True, max_length=1000, null=True)),
                ('assay', models.ManyToManyField(to='mogi.Assay')),
                ('galaxy_history', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='galaxy.History')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='MetaboliteAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('inchikey', models.CharField(blank=True, max_length=254, null=True)),
                ('inchikey1', models.CharField(blank=True, max_length=254, null=True)),
                ('cpeakgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
            ],
        ),
        migrations.CreateModel(
            name='MetaboliteAnnotationApproach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=254, null=True, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MFile',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.GenericFile')),
                ('prefix', models.CharField(max_length=300)),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.CreateModel(
            name='MFileSuffix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suffix', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MsLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ms_level', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='OntologyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ontology_id', models.CharField(max_length=200, unique=True)),
                ('iri', models.TextField(blank=True, null=True)),
                ('obo_id', models.CharField(blank=True, max_length=200, null=True)),
                ('ontology_name', models.CharField(blank=True, max_length=200, null=True)),
                ('ontology_prefix', models.CharField(blank=True, max_length=200, null=True)),
                ('short_form', models.CharField(max_length=200, unique=True)),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this ontology term')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the ontology', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this organism detail')),
                ('ontologyterm', models.ForeignKey(help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the organism detail', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganismPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this organism part detail')),
                ('ontologyterm', models.ForeignKey(help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the organism part detail', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PolarityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PubChem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchikey', models.CharField(max_length=254)),
                ('cid', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technical_replicate', models.IntegerField(default=1)),
                ('prefix', models.CharField(max_length=400)),
                ('assaydetail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.AssayDetail')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the assay run', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('polaritytype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.PolarityType')),
            ],
        ),
        migrations.CreateModel(
            name='SampleCollectionProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this sample type')),
                ('ontologyterm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the sample type', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Any details to track for the analysis', max_length=100, null=True)),
                ('assay', models.ManyToManyField(help_text='Choose assay to search against', to='mogi.Assay')),
                ('investigation', models.ManyToManyField(help_text='Choose investigation to search against', to='mogi.Investigation')),
            ],
        ),
        migrations.CreateModel(
            name='SPeak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField(blank=True, null=True)),
                ('mz', models.FloatField(null=True)),
                ('i', models.FloatField(null=True)),
                ('isotopes', models.CharField(blank=True, max_length=40, null=True)),
                ('adducts', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name_plural': 'Scan peaks',
            },
        ),
        migrations.CreateModel(
            name='SPeakMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('scan_idi', models.IntegerField(blank=True, null=True)),
                ('precursor_mz', models.FloatField(blank=True, null=True)),
                ('precursor_i', models.FloatField(blank=True, null=True)),
                ('scan_num', models.IntegerField(blank=True, null=True)),
                ('precursor_scan_num', models.IntegerField(blank=True, null=True)),
                ('precursor_nearest', models.IntegerField(blank=True, null=True)),
                ('precursor_rt', models.FloatField(blank=True, null=True)),
                ('ms_level', models.IntegerField(blank=True, null=True)),
                ('spectrum_type', models.CharField(blank=True, max_length=100, null=True)),
                ('spectrum_detail', models.CharField(blank=True, max_length=1000, null=True)),
                ('well', models.CharField(blank=True, max_length=100, null=True)),
                ('well_rtmin', models.FloatField(blank=True, null=True)),
                ('well_rtmax', models.FloatField(blank=True, null=True)),
                ('well_rt', models.FloatField(blank=True, null=True)),
                ('cpeakgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
                ('metabinputdata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
                ('run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.Run')),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Study description')),
                ('name', models.CharField(help_text='e.g. the study identifier', max_length=100)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('grant_number', models.CharField(blank=True, max_length=100, null=True)),
                ('funding_agency', models.CharField(blank=True, max_length=100, null=True)),
                ('submission_date', models.DateTimeField(blank=True, null=True)),
                ('public_release_date', models.DateTimeField(blank=True, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this study')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Investigation')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the study', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('study_design_descriptors', models.ManyToManyField(blank=True, help_text="Any ontological terms that can describe or 'tag' the study <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
            ],
            options={
                'unique_together': {('name', 'investigation')},
            },
        ),
        migrations.CreateModel(
            name='StudyFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='If no appropriate ontological term for the value, then add free text here', max_length=100, null=True, verbose_name='Study Factor Value (non ontology term)')),
                ('full_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this study factor')),
                ('ontologyterm_type', models.ForeignKey(blank=True, help_text="The type for the value e.g. gene knockout, concentration unit, etc If the ontology term is not available please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_type', to='mogi.OntologyTerm', verbose_name='Study Factor Type')),
                ('ontologyterm_unit', models.ForeignKey(blank=True, help_text='If the value has a unit, find an appropiate ontology term', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_unit', to='mogi.OntologyTerm', verbose_name='Study Factor Unit')),
                ('ontologyterm_value', models.ForeignKey(blank=True, help_text="The value, e.g. if  wild type,If the ontology term is not available please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ontologyterm_value', to='mogi.OntologyTerm', verbose_name='Study Factor Value (ontology term')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the study factor', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CombinedAnnotationConcat',
            fields=[
                ('combinedpeak', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='mogi.CombinedPeak')),
                ('top_score', models.FloatField(blank=True, null=True)),
                ('concat_score', models.CharField(blank=True, max_length=1000, null=True)),
                ('concat_inchikey', models.CharField(blank=True, max_length=1000, null=True)),
                ('concat_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('concat_adduct', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompoundAnnotationSummary',
            fields=[
                ('compound', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='mogi.Compound')),
                ('top_score', models.FloatField(blank=True, null=True)),
                ('top_rank', models.IntegerField(blank=True, null=True)),
                ('top_score_pos', models.FloatField(blank=True, null=True)),
                ('top_score_neg', models.FloatField(blank=True, null=True)),
                ('top_rank_pos', models.IntegerField(blank=True, null=True)),
                ('top_rank_neg', models.IntegerField(blank=True, null=True)),
                ('assays', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='LibrarySpectraMeta',
            fields=[
                ('speakmeta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.SPeakMeta')),
                ('name', models.TextField(blank=True, null=True)),
                ('accession', models.TextField()),
                ('collision_energy', models.TextField(blank=True, null=True)),
                ('resolution', models.CharField(blank=True, max_length=400, null=True)),
                ('polarity', models.CharField(blank=True, max_length=400, null=True)),
                ('fragmentation_type', models.CharField(blank=True, max_length=400, null=True)),
                ('precursor_type', models.TextField(blank=True, null=True)),
                ('instrument_type', models.CharField(blank=True, max_length=400, null=True)),
                ('instrument', models.CharField(blank=True, max_length=400, null=True)),
                ('copyright', models.TextField(blank=True, null=True)),
                ('column', models.TextField(blank=True, null=True)),
                ('mass_accuracy', models.FloatField(blank=True, null=True)),
                ('mass_error', models.FloatField(blank=True, null=True)),
                ('origin', models.TextField(blank=True, null=True)),
                ('inchikey', models.CharField(max_length=254)),
                ('splash', models.TextField(blank=True, null=True)),
                ('retention_index', models.FloatField(blank=True, null=True)),
                ('retention_time', models.FloatField(blank=True, null=True)),
                ('libraryspectrasource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.LibrarySpectraSource')),
            ],
            bases=('mogi.speakmeta',),
        ),
        migrations.CreateModel(
            name='XCMSFileInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('filename', models.CharField(blank=True, max_length=100, null=True)),
                ('classname', models.CharField(blank=True, max_length=100, null=True)),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
                ('mfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MFile')),
            ],
        ),
        migrations.CreateModel(
            name='StudySample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_name', models.CharField(help_text='The sample name has to unique for each study', max_length=200)),
                ('source_name', models.CharField(blank=True, help_text='The source of the sample', max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see this sample')),
                ('organism', models.ForeignKey(blank=True, help_text="If organism not available then please   <a target='_blank' href='/org_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.Organism')),
                ('organism_part', models.ForeignKey(blank=True, help_text="If organism part not available then please   <a target='_blank' href='/orgpart_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.OrganismPart')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the sample', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('samplecollectionprocess', models.ForeignKey(blank=True, help_text='The sample collection process used (will be added automatically)', null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.SampleCollectionProcess')),
                ('sampletype', models.ForeignKey(help_text='This is an internal category that helps with some downstream processing essentialy ANIMAL covers all biological samples, COMPOUND is for chemical standards or non biological samples, and BLANK is for any samples that represent the blank (e.g. for  blank subtraction)', on_delete=django.db.models.deletion.CASCADE, to='mogi.SampleType')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Study')),
                ('studyfactor', models.ManyToManyField(blank=True, help_text="If factor not available then please   <a target='_blank' href='/sfcreate/'>add</a>.", to='mogi.StudyFactor')),
            ],
            options={
                'unique_together': {('sample_name', 'study')},
            },
        ),
        migrations.CreateModel(
            name='SpeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('spetype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/spet_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.SpeType')),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='SpeProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('spefrac', models.IntegerField()),
                ('speprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SpeProtocol')),
            ],
        ),
        migrations.CreateModel(
            name='SPeakSPeakLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mzdiff', models.FloatField(blank=True, null=True)),
                ('linktype', models.CharField(blank=True, max_length=200, null=True)),
                ('speak1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speak1', to='mogi.SPeak')),
                ('speak2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speak2', to='mogi.SPeak')),
            ],
        ),
        migrations.CreateModel(
            name='SPeakMetaSPeakLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mzdiff', models.FloatField(blank=True, null=True)),
                ('linktype', models.CharField(blank=True, max_length=200, null=True)),
                ('speak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeak')),
                ('speakmeta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeakMeta')),
            ],
        ),
        migrations.CreateModel(
            name='SPeakMetaCPeakFragLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpeak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeak')),
                ('speakmeta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeakMeta')),
            ],
        ),
        migrations.AddField(
            model_name='speak',
            name='speakmeta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeakMeta'),
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_file', models.FileField(blank=True, null=True, upload_to=mogi.models.models_search.data_file_store)),
                ('matches', models.BooleanField()),
                ('searchparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SearchParam')),
            ],
        ),
        migrations.AddField(
            model_name='searchparam',
            name='study',
            field=models.ManyToManyField(help_text='Choose study to search against', to='mogi.Study'),
        ),
        migrations.AddField(
            model_name='searchparam',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ScoreType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('description', models.TextField()),
                ('metaboliteannotationapproach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteAnnotationApproach')),
            ],
            options={
                'unique_together': {('name', 'metaboliteannotationapproach')},
            },
        ),
        migrations.CreateModel(
            name='SampleCollectionProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.AddField(
            model_name='samplecollectionprocess',
            name='samplecollectionprotocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SampleCollectionProtocol'),
        ),
        migrations.CreateModel(
            name='PrecursorIonPurity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a_mz', models.FloatField(blank=True, null=True)),
                ('a_purity', models.FloatField(blank=True, null=True)),
                ('a_pknm', models.FloatField(blank=True, null=True)),
                ('i_mz', models.FloatField(blank=True, null=True)),
                ('i_purity', models.FloatField(blank=True, null=True)),
                ('i_pknm', models.FloatField(blank=True, null=True)),
                ('in_purity', models.FloatField(blank=True, null=True)),
                ('in_pknm', models.FloatField(blank=True, null=True)),
                ('speakmeta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeakMeta')),
            ],
        ),
        migrations.CreateModel(
            name='NeutralMass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('nm', models.FloatField()),
                ('ips', models.IntegerField(blank=True, null=True)),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
            ],
        ),
        migrations.CreateModel(
            name='MISAFile',
            fields=[
                ('genericfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gfiles.GenericFile')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Investigation')),
            ],
            bases=('gfiles.genericfile',),
        ),
        migrations.AddField(
            model_name='mfile',
            name='mfilesuffix',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MFileSuffix'),
        ),
        migrations.AddField(
            model_name='mfile',
            name='run',
            field=models.ForeignKey(help_text='The instrument run corresponding to this file', on_delete=django.db.models.deletion.CASCADE, to='mogi.Run'),
        ),
        migrations.CreateModel(
            name='MetaboliteIdentificationProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MetaboliteIdentificationProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
                ('metaboliteidentificationprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteIdentificationProtocol')),
            ],
        ),
        migrations.CreateModel(
            name='MetaboliteAnnotationScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_value', models.FloatField()),
                ('metaboliteannotation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteAnnotation')),
                ('scoretype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ScoreType')),
            ],
        ),
        migrations.CreateModel(
            name='MetaboliteAnnotationDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('detailtype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.DetailType')),
                ('metaboliteannotation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteAnnotation')),
            ],
        ),
        migrations.AddField(
            model_name='metaboliteannotation',
            name='metaboliteannotationapproach',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteAnnotationApproach'),
        ),
        migrations.AddField(
            model_name='metaboliteannotation',
            name='speak',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeak'),
        ),
        migrations.AddField(
            model_name='metaboliteannotation',
            name='speakmeta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeakMeta'),
        ),
        migrations.AddField(
            model_name='metabinputdata',
            name='polaritytype',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.PolarityType'),
        ),
        migrations.CreateModel(
            name='MeasurementTechnique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('measurementtechnique', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/mt_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.MeasurementTechnique')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MeasurementProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('measurementprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MeasurementProtocol')),
                ('polaritytype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.PolarityType')),
            ],
        ),
        migrations.CreateModel(
            name='Isotope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('iso', models.IntegerField()),
                ('charge', models.IntegerField()),
                ('cpeakgroup1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpeakgroup1', to='mogi.CPeakGroup')),
                ('cpeakgroup2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpeakgroup2', to='mogi.CPeakGroup')),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
            ],
        ),
        migrations.CreateModel(
            name='ISAGalaxyTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy_id', models.CharField(max_length=250)),
                ('galaxyinstancetracking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galaxy.GalaxyInstanceTracking')),
                ('investigation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Investigation')),
                ('isatogalaxyparam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galaxy.FilesToGalaxyDataLibraryParam')),
            ],
        ),
        migrations.CreateModel(
            name='ExtractionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('postextraction', models.CharField(blank=True, max_length=300, null=True)),
                ('derivitisation', models.CharField(blank=True, max_length=300, null=True)),
                ('extractiontype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/et_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.ExtractionType')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ExtractionProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('extractionprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ExtractionProtocol')),
            ],
        ),
        migrations.CreateModel(
            name='EicMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
            ],
        ),
        migrations.CreateModel(
            name='Eic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('scan', models.IntegerField()),
                ('intensity', models.FloatField(blank=True, null=True)),
                ('rt_raw', models.FloatField()),
                ('rt_corrected', models.FloatField(blank=True, null=True)),
                ('purity', models.FloatField(blank=True, null=True)),
                ('cpeak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeak')),
                ('cpeakgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
                ('eicmeta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.EicMeta')),
            ],
        ),
        migrations.AddField(
            model_name='detailtype',
            name='metaboliteannotationapproach',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteAnnotationApproach'),
        ),
        migrations.CreateModel(
            name='DataTransformationProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='DataTransformationProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.CharField(blank=True, max_length=300, null=True)),
                ('datatransformationprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.DataTransformationProtocol')),
            ],
        ),
        migrations.CreateModel(
            name='CPeakGroupSPeakLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mzdiff', models.FloatField(blank=True, null=True)),
                ('cpeakgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
                ('speak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeak')),
            ],
        ),
        migrations.CreateModel(
            name='CPeakGroupMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('metabinputdata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData')),
            ],
        ),
        migrations.CreateModel(
            name='CPeakGroupCPeakLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('best_feature', models.IntegerField(blank=True, null=True)),
                ('cpeak', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeak')),
                ('cpeakgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
            ],
        ),
        migrations.AddField(
            model_name='cpeakgroup',
            name='cpeak',
            field=models.ManyToManyField(through='mogi.CPeakGroupCPeakLink', to='mogi.CPeak'),
        ),
        migrations.AddField(
            model_name='cpeakgroup',
            name='cpeakgroupmeta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroupMeta'),
        ),
        migrations.AddField(
            model_name='cpeakgroup',
            name='speak',
            field=models.ManyToManyField(through='mogi.CPeakGroupSPeakLink', to='mogi.SPeak'),
        ),
        migrations.AddField(
            model_name='cpeak',
            name='speakmeta_frag',
            field=models.ManyToManyField(through='mogi.SPeakMetaCPeakFragLink', to='mogi.SPeakMeta'),
        ),
        migrations.AddField(
            model_name='cpeak',
            name='xcmsfileinfo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.XCMSFileInfo'),
        ),
        migrations.AddField(
            model_name='combinedpeak',
            name='cpeakgroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup'),
        ),
        migrations.AddField(
            model_name='combinedpeak',
            name='metabinputdata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MetabInputData'),
        ),
        migrations.AddField(
            model_name='combinedpeak',
            name='speak',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.SPeak'),
        ),
        migrations.CreateModel(
            name='CombinedAnnotationWeightedScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(blank=True, null=True)),
                ('wscore', models.FloatField(blank=True, null=True)),
                ('combinedannotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CombinedAnnotation')),
                ('scoretype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ScoreType')),
            ],
        ),
        migrations.CreateModel(
            name='CombinedAnnotationDownloadResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation_file', models.FileField(blank=True, null=True, upload_to=mogi.models.models_annotations.data_file_store)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('combinedannotationdownload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CombinedAnnotationDownload')),
            ],
        ),
        migrations.AddField(
            model_name='combinedannotation',
            name='combinedpeak',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CombinedPeak'),
        ),
        migrations.AddField(
            model_name='combinedannotation',
            name='compound',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.Compound'),
        ),
        migrations.CreateModel(
            name='ChromatographyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChromatographyProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('uri', models.CharField(blank=True, max_length=200, null=True)),
                ('version', models.CharField(max_length=30)),
                ('code_field', models.CharField(max_length=20, unique=True)),
                ('public', models.BooleanField(default=False, help_text='If public, then anybody can see and use this protocol')),
                ('protocol_file', models.FileField(blank=True, max_length=1000, null=True, upload_to=gfiles.models.data_file_store)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instrument_name', models.CharField(max_length=300)),
                ('chromatographytype', models.ForeignKey(blank=True, help_text="If a relevant term is not available, please  <a target='_blank' href='/ct_create/'>add</a>.", null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.ChromatographyType')),
                ('ontologyterm', models.ManyToManyField(blank=True, help_text="If the ontology term is not available, please  <a target='_blank' href='/search_ontologyterm/'>add</a>.", to='mogi.OntologyTerm')),
                ('owner', models.ForeignKey(blank=True, help_text='The user who created the protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('code_field', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ChromatographyProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('details', models.CharField(max_length=300)),
                ('chromatographyfrac', models.CharField(max_length=300)),
                ('chromatographyprotocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ChromatographyProtocol')),
            ],
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='chromatographyprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ChromatographyProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='datatransformationprocess',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.DataTransformationProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='extractionprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.ExtractionProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='measurementprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.MeasurementProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='metaboliteidentifcationprocess',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mogi.MetaboliteIdentificationProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='samplecollectionprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SampleCollectionProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='speprocess',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.SpeProcess'),
        ),
        migrations.AddField(
            model_name='assaydetail',
            name='studysample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.StudySample'),
        ),
        migrations.AddField(
            model_name='assay',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.Study'),
        ),
        migrations.CreateModel(
            name='Adduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idi', models.IntegerField()),
                ('adductrule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.AdductRule')),
                ('cpeakgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.CPeakGroup')),
                ('neutralmass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mogi.NeutralMass')),
            ],
        ),
        migrations.CreateModel(
            name='SearchNmParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.SearchParam')),
                ('masses', models.TextField(blank=True, help_text='list of exact masses to search against database', null=True)),
                ('ppm_target_tolerance', models.FloatField(blank=True, default=10, null=True)),
                ('ppm_library_tolerance', models.FloatField(blank=True, default=10, null=True)),
                ('polarity', models.ManyToManyField(help_text='Choose polarites to search against', to='mogi.PolarityType')),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.CreateModel(
            name='SearchMzParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.SearchParam')),
                ('masses', models.TextField(blank=True, help_text='list of exact masses to search against database', null=True)),
                ('ppm_target_tolerance', models.FloatField(blank=True, default=10, null=True)),
                ('ppm_library_tolerance', models.FloatField(blank=True, default=10, null=True)),
                ('ms_level', models.ManyToManyField(help_text='Choose the ms levels to search against', to='mogi.MsLevel')),
                ('polarity', models.ManyToManyField(help_text='Choose polarites to search against', to='mogi.PolarityType')),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.CreateModel(
            name='SearchFragParam',
            fields=[
                ('searchparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mogi.SearchParam')),
                ('mz_precursor', models.FloatField()),
                ('products', models.TextField(help_text='list product ions m/z and intensity pairs on each row')),
                ('ppm_precursor_tolerance', models.FloatField(default=5)),
                ('ppm_product_tolerance', models.FloatField(default=10)),
                ('dot_product_score_threshold', mogi.models.models_search.MinMaxFloat(default=0.5)),
                ('precursor_ion_purity', mogi.models.models_search.MinMaxFloat(default=0)),
                ('ra_threshold', mogi.models.models_search.MinMaxFloat(default=0.05, help_text='Remove any peaks below %x of the most intense peak ')),
                ('ra_diff_threshold', models.FloatField(default=10)),
                ('filter_on_precursor', models.BooleanField(blank=True)),
                ('polarity', models.ManyToManyField(help_text='Choose polarites to search against', to='mogi.PolarityType')),
            ],
            bases=('mogi.searchparam',),
        ),
        migrations.AddField(
            model_name='metaboliteannotation',
            name='libraryspectrameta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='libraryspectrameta', to='mogi.LibrarySpectraMeta'),
        ),
        migrations.AlterUniqueTogether(
            name='detailtype',
            unique_together={('name', 'metaboliteannotationapproach')},
        ),
        migrations.AlterUniqueTogether(
            name='assaydetail',
            unique_together={('code_field', 'assay')},
        ),
        migrations.AlterUniqueTogether(
            name='assay',
            unique_together={('name', 'study')},
        ),
    ]
